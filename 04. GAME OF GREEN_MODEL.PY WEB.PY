{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"MODEL.PY","provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["!pip install geopandas"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mCPxQX64QT6o","executionInfo":{"status":"ok","timestamp":1655663860652,"user_tz":-120,"elapsed":9075,"user":{"displayName":"Jacinto Jesús Moros Montañés","userId":"01080705787675890215"}},"outputId":"ac9650d8-5a53-4ec5-ccac-48ea61ae9e84"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Collecting geopandas\n","  Downloading geopandas-0.10.2-py2.py3-none-any.whl (1.0 MB)\n","\u001b[K     |████████████████████████████████| 1.0 MB 5.2 MB/s \n","\u001b[?25hCollecting pyproj>=2.2.0\n","  Downloading pyproj-3.2.1-cp37-cp37m-manylinux2010_x86_64.whl (6.3 MB)\n","\u001b[K     |████████████████████████████████| 6.3 MB 54.3 MB/s \n","\u001b[?25hRequirement already satisfied: shapely>=1.6 in /usr/local/lib/python3.7/dist-packages (from geopandas) (1.8.2)\n","Requirement already satisfied: pandas>=0.25.0 in /usr/local/lib/python3.7/dist-packages (from geopandas) (1.3.5)\n","Collecting fiona>=1.8\n","  Downloading Fiona-1.8.21-cp37-cp37m-manylinux2014_x86_64.whl (16.7 MB)\n","\u001b[K     |████████████████████████████████| 16.7 MB 319 kB/s \n","\u001b[?25hRequirement already satisfied: attrs>=17 in /usr/local/lib/python3.7/dist-packages (from fiona>=1.8->geopandas) (21.4.0)\n","Requirement already satisfied: setuptools in /usr/local/lib/python3.7/dist-packages (from fiona>=1.8->geopandas) (57.4.0)\n","Requirement already satisfied: click>=4.0 in /usr/local/lib/python3.7/dist-packages (from fiona>=1.8->geopandas) (7.1.2)\n","Requirement already satisfied: certifi in /usr/local/lib/python3.7/dist-packages (from fiona>=1.8->geopandas) (2022.6.15)\n","Collecting munch\n","  Downloading munch-2.5.0-py2.py3-none-any.whl (10 kB)\n","Requirement already satisfied: six>=1.7 in /usr/local/lib/python3.7/dist-packages (from fiona>=1.8->geopandas) (1.15.0)\n","Collecting cligj>=0.5\n","  Downloading cligj-0.7.2-py3-none-any.whl (7.1 kB)\n","Collecting click-plugins>=1.0\n","  Downloading click_plugins-1.1.1-py2.py3-none-any.whl (7.5 kB)\n","Requirement already satisfied: pytz>=2017.3 in /usr/local/lib/python3.7/dist-packages (from pandas>=0.25.0->geopandas) (2022.1)\n","Requirement already satisfied: python-dateutil>=2.7.3 in /usr/local/lib/python3.7/dist-packages (from pandas>=0.25.0->geopandas) (2.8.2)\n","Requirement already satisfied: numpy>=1.17.3 in /usr/local/lib/python3.7/dist-packages (from pandas>=0.25.0->geopandas) (1.21.6)\n","Installing collected packages: munch, cligj, click-plugins, pyproj, fiona, geopandas\n","Successfully installed click-plugins-1.1.1 cligj-0.7.2 fiona-1.8.21 geopandas-0.10.2 munch-2.5.0 pyproj-3.2.1\n"]}]},{"cell_type":"code","source":["# Import standard Libraries\n","import pandas as pd\n","import seaborn as sns\n","import numpy as np\n","\n","import geopandas as gpd\n","import json\n","\n","sns.set(rc={'figure.figsize':(10,10)})\n","print(\"imports ok\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5UQsOgP2ETgA","executionInfo":{"status":"ok","timestamp":1655665285113,"user_tz":-120,"elapsed":256,"user":{"displayName":"Jacinto Jesús Moros Montañés","userId":"01080705787675890215"}},"outputId":"46b4ffaa-0b57-4517-9047-7c0c6c50376e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["imports ok\n"]}]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/gdrive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"C9cFQxmnEkht","executionInfo":{"status":"ok","timestamp":1655663869639,"user_tz":-120,"elapsed":1904,"user":{"displayName":"Jacinto Jesús Moros Montañés","userId":"01080705787675890215"}},"outputId":"73ae769b-9be2-415e-998d-b89cd229be70"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/gdrive; to attempt to forcibly remount, call drive.mount(\"/content/gdrive\", force_remount=True).\n"]}]},{"cell_type":"code","source":["tryr = gpd.read_file('/content/gdrive/MyDrive/AIA_Studio/STUDIO AI COLAB NOTEBOOKS/EXPORTED_DATA/balanced_score_FINAL.geojson')\n","tryr"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":835},"id":"KSz4e5zMtwPo","executionInfo":{"status":"ok","timestamp":1655664207028,"user_tz":-120,"elapsed":121019,"user":{"displayName":"Jacinto Jesús Moros Montañés","userId":"01080705787675890215"}},"outputId":"1234d00e-7ed6-408c-9322-ca72b8a2b978"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["        score_2021  score_2020  score_2019  score_2018  score_2017  \\\n","0         4.269317    4.900170    5.170552    6.158766    5.729379   \n","1         5.825557    5.791295    5.926169    6.534000    6.344436   \n","2         6.598271    5.670149    5.549971    6.925204    6.990839   \n","3         6.866837    6.942251    5.520969    6.826044    6.102336   \n","4         7.423852    5.874164    5.685239    6.975591    7.040043   \n","...            ...         ...         ...         ...         ...   \n","824952    5.780908    4.466912    4.538414    6.367089    5.251197   \n","824953    4.766120    7.165076    7.482707    7.986551    7.066982   \n","824954    5.393523    3.698509    4.915890    4.489303    4.918972   \n","824955    2.645886    2.932297    3.437415    3.242768    3.526310   \n","824956    3.561385    3.815862    4.841016    5.038452    5.216227   \n","\n","        score_2016  score_2015  score_2014  score_2013  score_2012  ...  \\\n","0         6.325196    6.077658    5.595259    5.860377    5.685196  ...   \n","1         6.462646    6.188997    6.273624    7.246153    6.608277  ...   \n","2         6.807887    7.111985    7.046035    7.554802    6.681209  ...   \n","3         7.077406    7.326043    6.571863    6.909176    6.460843  ...   \n","4         6.928045    7.078249    6.520009    6.702269    7.320154  ...   \n","...            ...         ...         ...         ...         ...  ...   \n","824952    5.438986    6.338184    5.861351    5.773765    5.897059  ...   \n","824953    7.815669    8.062993    8.058595    7.849221    7.449248  ...   \n","824954    4.721545    5.354969    4.895142    5.230975    4.809885  ...   \n","824955    3.559827    4.005699    4.032628    4.174129    3.997476  ...   \n","824956    4.343078    4.735765    5.113851    4.727900    4.925324  ...   \n","\n","        score_2009  score_2008  score_2007  score_2006  score_2005  \\\n","0         5.732372    6.007179    6.189515    5.729702    5.761492   \n","1         6.532164    6.994831    7.125649    6.929823    6.492609   \n","2         6.785926    7.502334    7.232645    7.304365    7.230921   \n","3         6.921601    6.721027    7.092767    6.917814    6.777531   \n","4         7.251137    7.141662    7.391158    7.300983    7.101939   \n","...            ...         ...         ...         ...         ...   \n","824952    5.945721    5.986418    6.033903    5.761039    5.808729   \n","824953    7.841375    8.153020    7.824652    7.696636    7.787524   \n","824954    4.877962    4.745475    5.067398    4.689321    4.963767   \n","824955    3.661642    3.910247    4.093598    4.086915    3.954873   \n","824956    5.053694    4.855163    5.111570    4.817904    4.843590   \n","\n","        score_2004  score_2003  score_2002  score_2001  \\\n","0         6.158819    6.009611    5.760993    6.164730   \n","1         7.088283    7.013096    6.651908    7.067117   \n","2         7.349455    7.185301    7.000007    7.267667   \n","3         6.962898    6.880754    6.858725    6.970131   \n","4         7.027829    7.054863    7.194107    7.355832   \n","...            ...         ...         ...         ...   \n","824952    5.725442    6.040168    5.746895    5.885339   \n","824953    7.939050    7.641473    7.562339    7.945388   \n","824954    4.941969    5.016932    4.756917    4.885223   \n","824955    4.000909    4.014077    3.787586    4.097669   \n","824956    5.017852    4.890280    4.847561    5.124633   \n","\n","                         geometry  \n","0       POINT (16.36016 48.20876)  \n","1       POINT (16.36014 48.20867)  \n","2       POINT (16.35987 48.20870)  \n","3       POINT (16.36000 48.20868)  \n","4       POINT (16.36013 48.20866)  \n","...                           ...  \n","824952  POINT (16.40627 48.22463)  \n","824953  POINT (16.40636 48.22456)  \n","824954  POINT (16.40645 48.22450)  \n","824955  POINT (16.40580 48.22535)  \n","824956  POINT (16.40567 48.22532)  \n","\n","[824957 rows x 22 columns]"],"text/html":["\n","  <div id=\"df-20bd75ce-55d2-4c24-bc2c-9763df499d0b\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>score_2021</th>\n","      <th>score_2020</th>\n","      <th>score_2019</th>\n","      <th>score_2018</th>\n","      <th>score_2017</th>\n","      <th>score_2016</th>\n","      <th>score_2015</th>\n","      <th>score_2014</th>\n","      <th>score_2013</th>\n","      <th>score_2012</th>\n","      <th>...</th>\n","      <th>score_2009</th>\n","      <th>score_2008</th>\n","      <th>score_2007</th>\n","      <th>score_2006</th>\n","      <th>score_2005</th>\n","      <th>score_2004</th>\n","      <th>score_2003</th>\n","      <th>score_2002</th>\n","      <th>score_2001</th>\n","      <th>geometry</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>4.269317</td>\n","      <td>4.900170</td>\n","      <td>5.170552</td>\n","      <td>6.158766</td>\n","      <td>5.729379</td>\n","      <td>6.325196</td>\n","      <td>6.077658</td>\n","      <td>5.595259</td>\n","      <td>5.860377</td>\n","      <td>5.685196</td>\n","      <td>...</td>\n","      <td>5.732372</td>\n","      <td>6.007179</td>\n","      <td>6.189515</td>\n","      <td>5.729702</td>\n","      <td>5.761492</td>\n","      <td>6.158819</td>\n","      <td>6.009611</td>\n","      <td>5.760993</td>\n","      <td>6.164730</td>\n","      <td>POINT (16.36016 48.20876)</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>5.825557</td>\n","      <td>5.791295</td>\n","      <td>5.926169</td>\n","      <td>6.534000</td>\n","      <td>6.344436</td>\n","      <td>6.462646</td>\n","      <td>6.188997</td>\n","      <td>6.273624</td>\n","      <td>7.246153</td>\n","      <td>6.608277</td>\n","      <td>...</td>\n","      <td>6.532164</td>\n","      <td>6.994831</td>\n","      <td>7.125649</td>\n","      <td>6.929823</td>\n","      <td>6.492609</td>\n","      <td>7.088283</td>\n","      <td>7.013096</td>\n","      <td>6.651908</td>\n","      <td>7.067117</td>\n","      <td>POINT (16.36014 48.20867)</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>6.598271</td>\n","      <td>5.670149</td>\n","      <td>5.549971</td>\n","      <td>6.925204</td>\n","      <td>6.990839</td>\n","      <td>6.807887</td>\n","      <td>7.111985</td>\n","      <td>7.046035</td>\n","      <td>7.554802</td>\n","      <td>6.681209</td>\n","      <td>...</td>\n","      <td>6.785926</td>\n","      <td>7.502334</td>\n","      <td>7.232645</td>\n","      <td>7.304365</td>\n","      <td>7.230921</td>\n","      <td>7.349455</td>\n","      <td>7.185301</td>\n","      <td>7.000007</td>\n","      <td>7.267667</td>\n","      <td>POINT (16.35987 48.20870)</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>6.866837</td>\n","      <td>6.942251</td>\n","      <td>5.520969</td>\n","      <td>6.826044</td>\n","      <td>6.102336</td>\n","      <td>7.077406</td>\n","      <td>7.326043</td>\n","      <td>6.571863</td>\n","      <td>6.909176</td>\n","      <td>6.460843</td>\n","      <td>...</td>\n","      <td>6.921601</td>\n","      <td>6.721027</td>\n","      <td>7.092767</td>\n","      <td>6.917814</td>\n","      <td>6.777531</td>\n","      <td>6.962898</td>\n","      <td>6.880754</td>\n","      <td>6.858725</td>\n","      <td>6.970131</td>\n","      <td>POINT (16.36000 48.20868)</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>7.423852</td>\n","      <td>5.874164</td>\n","      <td>5.685239</td>\n","      <td>6.975591</td>\n","      <td>7.040043</td>\n","      <td>6.928045</td>\n","      <td>7.078249</td>\n","      <td>6.520009</td>\n","      <td>6.702269</td>\n","      <td>7.320154</td>\n","      <td>...</td>\n","      <td>7.251137</td>\n","      <td>7.141662</td>\n","      <td>7.391158</td>\n","      <td>7.300983</td>\n","      <td>7.101939</td>\n","      <td>7.027829</td>\n","      <td>7.054863</td>\n","      <td>7.194107</td>\n","      <td>7.355832</td>\n","      <td>POINT (16.36013 48.20866)</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>824952</th>\n","      <td>5.780908</td>\n","      <td>4.466912</td>\n","      <td>4.538414</td>\n","      <td>6.367089</td>\n","      <td>5.251197</td>\n","      <td>5.438986</td>\n","      <td>6.338184</td>\n","      <td>5.861351</td>\n","      <td>5.773765</td>\n","      <td>5.897059</td>\n","      <td>...</td>\n","      <td>5.945721</td>\n","      <td>5.986418</td>\n","      <td>6.033903</td>\n","      <td>5.761039</td>\n","      <td>5.808729</td>\n","      <td>5.725442</td>\n","      <td>6.040168</td>\n","      <td>5.746895</td>\n","      <td>5.885339</td>\n","      <td>POINT (16.40627 48.22463)</td>\n","    </tr>\n","    <tr>\n","      <th>824953</th>\n","      <td>4.766120</td>\n","      <td>7.165076</td>\n","      <td>7.482707</td>\n","      <td>7.986551</td>\n","      <td>7.066982</td>\n","      <td>7.815669</td>\n","      <td>8.062993</td>\n","      <td>8.058595</td>\n","      <td>7.849221</td>\n","      <td>7.449248</td>\n","      <td>...</td>\n","      <td>7.841375</td>\n","      <td>8.153020</td>\n","      <td>7.824652</td>\n","      <td>7.696636</td>\n","      <td>7.787524</td>\n","      <td>7.939050</td>\n","      <td>7.641473</td>\n","      <td>7.562339</td>\n","      <td>7.945388</td>\n","      <td>POINT (16.40636 48.22456)</td>\n","    </tr>\n","    <tr>\n","      <th>824954</th>\n","      <td>5.393523</td>\n","      <td>3.698509</td>\n","      <td>4.915890</td>\n","      <td>4.489303</td>\n","      <td>4.918972</td>\n","      <td>4.721545</td>\n","      <td>5.354969</td>\n","      <td>4.895142</td>\n","      <td>5.230975</td>\n","      <td>4.809885</td>\n","      <td>...</td>\n","      <td>4.877962</td>\n","      <td>4.745475</td>\n","      <td>5.067398</td>\n","      <td>4.689321</td>\n","      <td>4.963767</td>\n","      <td>4.941969</td>\n","      <td>5.016932</td>\n","      <td>4.756917</td>\n","      <td>4.885223</td>\n","      <td>POINT (16.40645 48.22450)</td>\n","    </tr>\n","    <tr>\n","      <th>824955</th>\n","      <td>2.645886</td>\n","      <td>2.932297</td>\n","      <td>3.437415</td>\n","      <td>3.242768</td>\n","      <td>3.526310</td>\n","      <td>3.559827</td>\n","      <td>4.005699</td>\n","      <td>4.032628</td>\n","      <td>4.174129</td>\n","      <td>3.997476</td>\n","      <td>...</td>\n","      <td>3.661642</td>\n","      <td>3.910247</td>\n","      <td>4.093598</td>\n","      <td>4.086915</td>\n","      <td>3.954873</td>\n","      <td>4.000909</td>\n","      <td>4.014077</td>\n","      <td>3.787586</td>\n","      <td>4.097669</td>\n","      <td>POINT (16.40580 48.22535)</td>\n","    </tr>\n","    <tr>\n","      <th>824956</th>\n","      <td>3.561385</td>\n","      <td>3.815862</td>\n","      <td>4.841016</td>\n","      <td>5.038452</td>\n","      <td>5.216227</td>\n","      <td>4.343078</td>\n","      <td>4.735765</td>\n","      <td>5.113851</td>\n","      <td>4.727900</td>\n","      <td>4.925324</td>\n","      <td>...</td>\n","      <td>5.053694</td>\n","      <td>4.855163</td>\n","      <td>5.111570</td>\n","      <td>4.817904</td>\n","      <td>4.843590</td>\n","      <td>5.017852</td>\n","      <td>4.890280</td>\n","      <td>4.847561</td>\n","      <td>5.124633</td>\n","      <td>POINT (16.40567 48.22532)</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>824957 rows × 22 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-20bd75ce-55d2-4c24-bc2c-9763df499d0b')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-20bd75ce-55d2-4c24-bc2c-9763df499d0b button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-20bd75ce-55d2-4c24-bc2c-9763df499d0b');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":11}]},{"cell_type":"code","source":["point_names=[]\n","for i in range(len(tryr)):\n","  pointName = 'ptID'+str(i)\n","  point_names.append(pointName)\n"],"metadata":{"id":"RivQDWVHR_CG"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[""],"metadata":{"id":"Tu1oiKVYSeN5"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["tryr['point_id'] = point_names"],"metadata":{"id":"-jz3gVhlR3rK"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["tryr.geometry.x"],"metadata":{"id":"AAMhBF6TS0WQ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["tryr['lat']= tryr.geometry.x\n","tryr['lng']=tryr.geometry.y"],"metadata":{"id":"bcQL5B__SsD1"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["tryr"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":835},"id":"Z6YKAzqnSYEQ","executionInfo":{"status":"ok","timestamp":1655664567595,"user_tz":-120,"elapsed":1557,"user":{"displayName":"Jacinto Jesús Moros Montañés","userId":"01080705787675890215"}},"outputId":"e2a25d35-92de-4e2b-c61b-4ab607e37e40"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["        score_2021  score_2020  score_2019  score_2018  score_2017  \\\n","0         4.269317    4.900170    5.170552    6.158766    5.729379   \n","1         5.825557    5.791295    5.926169    6.534000    6.344436   \n","2         6.598271    5.670149    5.549971    6.925204    6.990839   \n","3         6.866837    6.942251    5.520969    6.826044    6.102336   \n","4         7.423852    5.874164    5.685239    6.975591    7.040043   \n","...            ...         ...         ...         ...         ...   \n","824952    5.780908    4.466912    4.538414    6.367089    5.251197   \n","824953    4.766120    7.165076    7.482707    7.986551    7.066982   \n","824954    5.393523    3.698509    4.915890    4.489303    4.918972   \n","824955    2.645886    2.932297    3.437415    3.242768    3.526310   \n","824956    3.561385    3.815862    4.841016    5.038452    5.216227   \n","\n","        score_2016  score_2015  score_2014  score_2013  score_2012  ...  \\\n","0         6.325196    6.077658    5.595259    5.860377    5.685196  ...   \n","1         6.462646    6.188997    6.273624    7.246153    6.608277  ...   \n","2         6.807887    7.111985    7.046035    7.554802    6.681209  ...   \n","3         7.077406    7.326043    6.571863    6.909176    6.460843  ...   \n","4         6.928045    7.078249    6.520009    6.702269    7.320154  ...   \n","...            ...         ...         ...         ...         ...  ...   \n","824952    5.438986    6.338184    5.861351    5.773765    5.897059  ...   \n","824953    7.815669    8.062993    8.058595    7.849221    7.449248  ...   \n","824954    4.721545    5.354969    4.895142    5.230975    4.809885  ...   \n","824955    3.559827    4.005699    4.032628    4.174129    3.997476  ...   \n","824956    4.343078    4.735765    5.113851    4.727900    4.925324  ...   \n","\n","        score_2006  score_2005  score_2004  score_2003  score_2002  \\\n","0         5.729702    5.761492    6.158819    6.009611    5.760993   \n","1         6.929823    6.492609    7.088283    7.013096    6.651908   \n","2         7.304365    7.230921    7.349455    7.185301    7.000007   \n","3         6.917814    6.777531    6.962898    6.880754    6.858725   \n","4         7.300983    7.101939    7.027829    7.054863    7.194107   \n","...            ...         ...         ...         ...         ...   \n","824952    5.761039    5.808729    5.725442    6.040168    5.746895   \n","824953    7.696636    7.787524    7.939050    7.641473    7.562339   \n","824954    4.689321    4.963767    4.941969    5.016932    4.756917   \n","824955    4.086915    3.954873    4.000909    4.014077    3.787586   \n","824956    4.817904    4.843590    5.017852    4.890280    4.847561   \n","\n","        score_2001                   geometry    point_id        lat  \\\n","0         6.164730  POINT (16.36016 48.20876)       ptID0  16.360165   \n","1         7.067117  POINT (16.36014 48.20867)       ptID1  16.360139   \n","2         7.267667  POINT (16.35987 48.20870)       ptID2  16.359868   \n","3         6.970131  POINT (16.36000 48.20868)       ptID3  16.360000   \n","4         7.355832  POINT (16.36013 48.20866)       ptID4  16.360131   \n","...            ...                        ...         ...        ...   \n","824952    5.885339  POINT (16.40627 48.22463)  ptID824952  16.406266   \n","824953    7.945388  POINT (16.40636 48.22456)  ptID824953  16.406359   \n","824954    4.885223  POINT (16.40645 48.22450)  ptID824954  16.406452   \n","824955    4.097669  POINT (16.40580 48.22535)  ptID824955  16.405801   \n","824956    5.124633  POINT (16.40567 48.22532)  ptID824956  16.405675   \n","\n","              lng  \n","0       48.208759  \n","1       48.208671  \n","2       48.208702  \n","3       48.208683  \n","4       48.208663  \n","...           ...  \n","824952  48.224626  \n","824953  48.224561  \n","824954  48.224496  \n","824955  48.225347  \n","824956  48.225317  \n","\n","[824957 rows x 25 columns]"],"text/html":["\n","  <div id=\"df-02d1edfe-666b-4b90-9da0-a684e0f256cf\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>score_2021</th>\n","      <th>score_2020</th>\n","      <th>score_2019</th>\n","      <th>score_2018</th>\n","      <th>score_2017</th>\n","      <th>score_2016</th>\n","      <th>score_2015</th>\n","      <th>score_2014</th>\n","      <th>score_2013</th>\n","      <th>score_2012</th>\n","      <th>...</th>\n","      <th>score_2006</th>\n","      <th>score_2005</th>\n","      <th>score_2004</th>\n","      <th>score_2003</th>\n","      <th>score_2002</th>\n","      <th>score_2001</th>\n","      <th>geometry</th>\n","      <th>point_id</th>\n","      <th>lat</th>\n","      <th>lng</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>4.269317</td>\n","      <td>4.900170</td>\n","      <td>5.170552</td>\n","      <td>6.158766</td>\n","      <td>5.729379</td>\n","      <td>6.325196</td>\n","      <td>6.077658</td>\n","      <td>5.595259</td>\n","      <td>5.860377</td>\n","      <td>5.685196</td>\n","      <td>...</td>\n","      <td>5.729702</td>\n","      <td>5.761492</td>\n","      <td>6.158819</td>\n","      <td>6.009611</td>\n","      <td>5.760993</td>\n","      <td>6.164730</td>\n","      <td>POINT (16.36016 48.20876)</td>\n","      <td>ptID0</td>\n","      <td>16.360165</td>\n","      <td>48.208759</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>5.825557</td>\n","      <td>5.791295</td>\n","      <td>5.926169</td>\n","      <td>6.534000</td>\n","      <td>6.344436</td>\n","      <td>6.462646</td>\n","      <td>6.188997</td>\n","      <td>6.273624</td>\n","      <td>7.246153</td>\n","      <td>6.608277</td>\n","      <td>...</td>\n","      <td>6.929823</td>\n","      <td>6.492609</td>\n","      <td>7.088283</td>\n","      <td>7.013096</td>\n","      <td>6.651908</td>\n","      <td>7.067117</td>\n","      <td>POINT (16.36014 48.20867)</td>\n","      <td>ptID1</td>\n","      <td>16.360139</td>\n","      <td>48.208671</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>6.598271</td>\n","      <td>5.670149</td>\n","      <td>5.549971</td>\n","      <td>6.925204</td>\n","      <td>6.990839</td>\n","      <td>6.807887</td>\n","      <td>7.111985</td>\n","      <td>7.046035</td>\n","      <td>7.554802</td>\n","      <td>6.681209</td>\n","      <td>...</td>\n","      <td>7.304365</td>\n","      <td>7.230921</td>\n","      <td>7.349455</td>\n","      <td>7.185301</td>\n","      <td>7.000007</td>\n","      <td>7.267667</td>\n","      <td>POINT (16.35987 48.20870)</td>\n","      <td>ptID2</td>\n","      <td>16.359868</td>\n","      <td>48.208702</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>6.866837</td>\n","      <td>6.942251</td>\n","      <td>5.520969</td>\n","      <td>6.826044</td>\n","      <td>6.102336</td>\n","      <td>7.077406</td>\n","      <td>7.326043</td>\n","      <td>6.571863</td>\n","      <td>6.909176</td>\n","      <td>6.460843</td>\n","      <td>...</td>\n","      <td>6.917814</td>\n","      <td>6.777531</td>\n","      <td>6.962898</td>\n","      <td>6.880754</td>\n","      <td>6.858725</td>\n","      <td>6.970131</td>\n","      <td>POINT (16.36000 48.20868)</td>\n","      <td>ptID3</td>\n","      <td>16.360000</td>\n","      <td>48.208683</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>7.423852</td>\n","      <td>5.874164</td>\n","      <td>5.685239</td>\n","      <td>6.975591</td>\n","      <td>7.040043</td>\n","      <td>6.928045</td>\n","      <td>7.078249</td>\n","      <td>6.520009</td>\n","      <td>6.702269</td>\n","      <td>7.320154</td>\n","      <td>...</td>\n","      <td>7.300983</td>\n","      <td>7.101939</td>\n","      <td>7.027829</td>\n","      <td>7.054863</td>\n","      <td>7.194107</td>\n","      <td>7.355832</td>\n","      <td>POINT (16.36013 48.20866)</td>\n","      <td>ptID4</td>\n","      <td>16.360131</td>\n","      <td>48.208663</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>824952</th>\n","      <td>5.780908</td>\n","      <td>4.466912</td>\n","      <td>4.538414</td>\n","      <td>6.367089</td>\n","      <td>5.251197</td>\n","      <td>5.438986</td>\n","      <td>6.338184</td>\n","      <td>5.861351</td>\n","      <td>5.773765</td>\n","      <td>5.897059</td>\n","      <td>...</td>\n","      <td>5.761039</td>\n","      <td>5.808729</td>\n","      <td>5.725442</td>\n","      <td>6.040168</td>\n","      <td>5.746895</td>\n","      <td>5.885339</td>\n","      <td>POINT (16.40627 48.22463)</td>\n","      <td>ptID824952</td>\n","      <td>16.406266</td>\n","      <td>48.224626</td>\n","    </tr>\n","    <tr>\n","      <th>824953</th>\n","      <td>4.766120</td>\n","      <td>7.165076</td>\n","      <td>7.482707</td>\n","      <td>7.986551</td>\n","      <td>7.066982</td>\n","      <td>7.815669</td>\n","      <td>8.062993</td>\n","      <td>8.058595</td>\n","      <td>7.849221</td>\n","      <td>7.449248</td>\n","      <td>...</td>\n","      <td>7.696636</td>\n","      <td>7.787524</td>\n","      <td>7.939050</td>\n","      <td>7.641473</td>\n","      <td>7.562339</td>\n","      <td>7.945388</td>\n","      <td>POINT (16.40636 48.22456)</td>\n","      <td>ptID824953</td>\n","      <td>16.406359</td>\n","      <td>48.224561</td>\n","    </tr>\n","    <tr>\n","      <th>824954</th>\n","      <td>5.393523</td>\n","      <td>3.698509</td>\n","      <td>4.915890</td>\n","      <td>4.489303</td>\n","      <td>4.918972</td>\n","      <td>4.721545</td>\n","      <td>5.354969</td>\n","      <td>4.895142</td>\n","      <td>5.230975</td>\n","      <td>4.809885</td>\n","      <td>...</td>\n","      <td>4.689321</td>\n","      <td>4.963767</td>\n","      <td>4.941969</td>\n","      <td>5.016932</td>\n","      <td>4.756917</td>\n","      <td>4.885223</td>\n","      <td>POINT (16.40645 48.22450)</td>\n","      <td>ptID824954</td>\n","      <td>16.406452</td>\n","      <td>48.224496</td>\n","    </tr>\n","    <tr>\n","      <th>824955</th>\n","      <td>2.645886</td>\n","      <td>2.932297</td>\n","      <td>3.437415</td>\n","      <td>3.242768</td>\n","      <td>3.526310</td>\n","      <td>3.559827</td>\n","      <td>4.005699</td>\n","      <td>4.032628</td>\n","      <td>4.174129</td>\n","      <td>3.997476</td>\n","      <td>...</td>\n","      <td>4.086915</td>\n","      <td>3.954873</td>\n","      <td>4.000909</td>\n","      <td>4.014077</td>\n","      <td>3.787586</td>\n","      <td>4.097669</td>\n","      <td>POINT (16.40580 48.22535)</td>\n","      <td>ptID824955</td>\n","      <td>16.405801</td>\n","      <td>48.225347</td>\n","    </tr>\n","    <tr>\n","      <th>824956</th>\n","      <td>3.561385</td>\n","      <td>3.815862</td>\n","      <td>4.841016</td>\n","      <td>5.038452</td>\n","      <td>5.216227</td>\n","      <td>4.343078</td>\n","      <td>4.735765</td>\n","      <td>5.113851</td>\n","      <td>4.727900</td>\n","      <td>4.925324</td>\n","      <td>...</td>\n","      <td>4.817904</td>\n","      <td>4.843590</td>\n","      <td>5.017852</td>\n","      <td>4.890280</td>\n","      <td>4.847561</td>\n","      <td>5.124633</td>\n","      <td>POINT (16.40567 48.22532)</td>\n","      <td>ptID824956</td>\n","      <td>16.405675</td>\n","      <td>48.225317</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>824957 rows × 25 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-02d1edfe-666b-4b90-9da0-a684e0f256cf')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-02d1edfe-666b-4b90-9da0-a684e0f256cf button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-02d1edfe-666b-4b90-9da0-a684e0f256cf');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":19}]},{"cell_type":"code","source":["filepath_geoJSON = '/content/gdrive/MyDrive/AIA_Studio/STUDIO AI COLAB NOTEBOOKS/EXPORTED_DATA/final GEOJSON/gameOFgreenGJSON.geojson'\n","tryr.to_file(filepath_geoJSON, driver=\"GeoJSON\")"],"metadata":{"id":"5IYtWQiFTuPJ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["with open(filepath_geoJSON, 'r') as f:\n","  gj = json.loads(f.read())"],"metadata":{"id":"DDjYqEZSVu2Y"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["dictionary=[]\n","for i in range(824957):\n","  dic = {}\n","  for x, y in zip(latitudes,longitudes):\n","    dic['lat'] = x \n","    dic['lon'] = y\n","  dictionary.append(dic)\n","    \n","print(dictionary)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1DmZht8vaxyZ","executionInfo":{"status":"ok","timestamp":1655668494497,"user_tz":-120,"elapsed":1573,"user":{"displayName":"Jacinto Jesús Moros Montañés","userId":"01080705787675890215"}},"outputId":"a57e7eee-4470-4e22-8062-30cf09f14251"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[{'lat': 16.405674551599915, 'lon': 48.22531686856648}, {'lat': 16.405674551599915, 'lon': 48.22531686856648}, {'lat': 16.405674551599915, 'lon': 48.22531686856648}, {'lat': 16.405674551599915, 'lon': 48.22531686856648}, {'lat': 16.405674551599915, 'lon': 48.22531686856648}]\n"]}]},{"cell_type":"code","source":["dictionary=[]\n","for i in range(824957):\n","  dic = {}\n","  latte = gj['features'][i]['properties']['lat']\n","  dic['lat'] = latte\n","  longtte = gj['features'][i]['properties']['lng']\n","  dic['lon'] = longtte\n","  dictionary.append(dic)\n","    \n","print(dictionary)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kL2efLZJiNuI","executionInfo":{"status":"ok","timestamp":1655668585706,"user_tz":-120,"elapsed":3990,"user":{"displayName":"Jacinto Jesús Moros Montañés","userId":"01080705787675890215"}},"outputId":"572004fd-c8aa-4098-b6ad-d2b04d5b080c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["IOPub data rate exceeded.\n","The notebook server will temporarily stop sending output\n","to the client in order to avoid crashing it.\n","To change this limit, set the config variable\n","`--NotebookApp.iopub_data_rate_limit`.\n","\n","Current values:\n","NotebookApp.iopub_data_rate_limit=1000000.0 (bytes/sec)\n","NotebookApp.rate_limit_window=3.0 (secs)\n","\n"]}]},{"cell_type":"code","source":["len(dictionary)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7VCmE8bLifcj","executionInfo":{"status":"ok","timestamp":1655668614042,"user_tz":-120,"elapsed":226,"user":{"displayName":"Jacinto Jesús Moros Montañés","userId":"01080705787675890215"}},"outputId":"bbbb40ef-bee6-4127-8bb9-9e69c692c5d3"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["824957"]},"metadata":{},"execution_count":81}]},{"cell_type":"code","source":["dic={}\n","for x in range (1,6):\n","    level = 'level%d' % x \n","    dic[level] = {}\n","    for iteration in range(1, 4): \n","        value = 'value%d' % iteration\n","        dic[level][value] = 0 \n","\n","print dic "],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"NfBKFdGFfkZK","executionInfo":{"status":"ok","timestamp":1655668034346,"user_tz":-120,"elapsed":547,"user":{"displayName":"Jacinto Jesús Moros Montañés","userId":"01080705787675890215"}},"outputId":"224ac4ae-48bf-4c4f-abb3-baef124a9ca4"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["{'lat': 16.405674551599915, 'lon': 48.22531686856648}\n"]}]},{"cell_type":"code","source":["latitudes = []\n","longitudes = []\n","for i in range(824957):\n","  latte = gj['features'][i]['properties']['lat']\n","  latitudes.append(latte)\n","  longtte = gj['features'][i]['properties']['lng']\n","  longitudes.append(longtte)"],"metadata":{"id":"JdLPamDAatR6"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["latitudes"],"metadata":{"id":"h5e0UrD4euVy"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from math import cos, asin, sqrt\n","\n","lat_user = 16.29420959\n","lng_user = 48.188331023\n","\n","dictionary=[]\n","for i in range(824957):\n","  dic = {}\n","  latte = gj['features'][i]['properties']['lat']\n","  dic['lat'] = latte\n","  longtte = gj['features'][i]['properties']['lng']\n","  dic['lon'] = longtte\n","  dictionary.append(dic)\n","    \n","print(dictionary)\n","\n","def distance(lat1, lon1, lat2, lon2):\n","    p = 0.017453292519943295\n","    hav = 0.5 - cos((lat2-lat1)*p)/2 + cos(lat1*p)*cos(lat2*p) * (1-cos((lon2-lon1)*p)) / 2\n","    return 12742 * asin(sqrt(hav))\n","\n","def closest(data, v):\n","    return min(data, key=lambda p: distance(v['lat'],v['lon'],p['lat'],p['lon']))\n","\n","tempDataList = dictionary\n","\n","v = {'lat': lat_user, 'lon': lng_user}\n","\n","\n","def list_duplicates_of(seq,item):\n","    start_at = -1\n","    locs = []\n","    while True:\n","        try:\n","            loc = seq.index(item,start_at+1)\n","        except ValueError:\n","            break\n","        else:\n","            locs.append(loc)\n","            start_at = loc\n","    return locs\n","\n","source = tempDataList\n","point_id = int(list_duplicates_of(source, closest(tempDataList, v))[0])\n","point_id"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"x68Vrvqyb2Gw","executionInfo":{"status":"ok","timestamp":1655669448064,"user_tz":-120,"elapsed":2630,"user":{"displayName":"Jacinto Jesús Moros Montañés","userId":"01080705787675890215"}},"outputId":"e2660d2a-5a04-4865-f286-4678666818f4"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["637864"]},"metadata":{},"execution_count":99}]},{"cell_type":"code","source":["score2001 = gj['features'][637864]['properties']['score_2001']"],"metadata":{"id":"QMrnenJzlf5q"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["score2001"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vEI-ywhzlhI8","executionInfo":{"status":"ok","timestamp":1655669457113,"user_tz":-120,"elapsed":2,"user":{"displayName":"Jacinto Jesús Moros Montañés","userId":"01080705787675890215"}},"outputId":"e2710b12-f354-46dd-be76-1d62c309119a"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["2.8000849107852277"]},"metadata":{},"execution_count":101}]},{"cell_type":"code","source":["def list_duplicates_of(seq,item):\n","    start_at = -1\n","    locs = []\n","    while True:\n","        try:\n","            loc = seq.index(item,start_at+1)\n","        except ValueError:\n","            break\n","        else:\n","            locs.append(loc)\n","            start_at = loc\n","    return locs\n","\n","source = tempDataList\n","print(list_duplicates_of(source, closest(tempDataList, v)))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"TctlkXopkqZE","executionInfo":{"status":"ok","timestamp":1655669197155,"user_tz":-120,"elapsed":1397,"user":{"displayName":"Jacinto Jesús Moros Montañés","userId":"01080705787675890215"}},"outputId":"3df2e0df-9de9-4dd3-a235-7b526f3fb7d6"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[637864]\n"]}]},{"cell_type":"code","source":["tempDataList[0]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"JkP7QMTokRB1","executionInfo":{"status":"ok","timestamp":1655669075300,"user_tz":-120,"elapsed":6,"user":{"displayName":"Jacinto Jesús Moros Montañés","userId":"01080705787675890215"}},"outputId":"1d637c98-bcdb-48df-a51c-e2412709e612"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{'lat': 16.3601647, 'lon': 48.2087591}"]},"metadata":{},"execution_count":85}]},{"cell_type":"code","source":["lat = 16.29420409220959\n","lng = 48.18694963331023\n","latitudes\n","longitudes"],"metadata":{"id":"LyoGjjzceWYn"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["oiw0vbne = score2001 = gj['features'][0]['properties']['lat']"],"metadata":{"id":"NIRWqz-lXZI3"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["oiw0vbne"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"CjgsetFIXdHB","executionInfo":{"status":"ok","timestamp":1655666554836,"user_tz":-120,"elapsed":231,"user":{"displayName":"Jacinto Jesús Moros Montañés","userId":"01080705787675890215"}},"outputId":"3bfe032c-ae21-4661-cb20-6ca30d01012b"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["16.3601647"]},"metadata":{},"execution_count":52}]},{"cell_type":"code","source":["def call(input_args, number_new_trees, radius_circle):\n","  \n","  #Open GEOJSON\n","  with open('path/to/gameOFgreenGJSON.geojson', 'r') as f:\n","    gj = json.loads(f.read())\n","\n","  #New point scored by User\n","  new_point = []\n","\n","  #Lat and Long from the point selected by User\n","  lat_user = input_args['user_clicked_point_lat']\n","  lng_user = input_args['user_clicked_point_lat']\n","\n","  # find which point is closest to user\n","  #######\n","  from math import cos, asin, sqrt\n","\n","  dictionary=[]\n","  for i in range(824957):\n","    dic = {}\n","    latte = gj['features'][i]['properties']['lat']\n","    dic['lat'] = latte\n","    longtte = gj['features'][i]['properties']['lng']\n","    dic['lon'] = longtte\n","    dictionary.append(dic)\n","    \n","  print(dictionary)\n","\n","  def distance(lat1, lon1, lat2, lon2):\n","    p = 0.017453292519943295\n","    hav = 0.5 - cos((lat2-lat1)*p)/2 + cos(lat1*p)*cos(lat2*p) * (1-cos((lon2-lon1)*p)) / 2\n","    return 12742 * asin(sqrt(hav))\n","\n","  def closest(data, v):\n","    return min(data, key=lambda p: distance(v['lat'],v['lon'],p['lat'],p['lon']))\n","\n","  tempDataList = dictionary\n","\n","  v = {'lat': lat_user, 'lon': lng_user}\n","\n","\n","  def list_duplicates_of(seq,item):\n","    start_at = -1\n","    locs = []\n","    while True:\n","        try:\n","            loc = seq.index(item,start_at+1)\n","        except ValueError:\n","            break\n","        else:\n","            locs.append(loc)\n","            start_at = loc\n","    return locs\n","\n","  source = tempDataList\n","  point_id = int(list_duplicates_of(source, closest(tempDataList, v))[0])\n","\n","  #score for each year from the point selected by User\n","    \n","  score2001 = gj['features'][point_id]['properties']['score_2001']\n","  score2002 = gj['features'][point_id]['properties']['score_2002']\n","  score2003 = gj['features'][point_id]['properties']['score_2003']\n","  score2004 = gj['features'][point_id]['properties']['score_2004']\n","  score2005 = gj['features'][point_id]['properties']['score_2005']\n","  score2006 = gj['features'][point_id]['properties']['score_2006']\n","  score2007 = gj['features'][point_id]['properties']['score_2007']\n","  score2008 = gj['features'][point_id]['properties']['score_2008']\n","  score2009 = gj['features'][point_id]['properties']['score_2009']\n","  score2010 = gj['features'][point_id]['properties']['score_2010']\n","  score2011 = gj['features'][point_id]['properties']['score_2011']\n","  score2012 = gj['features'][point_id]['properties']['score_2012']\n","  score2013 = gj['features'][point_id]['properties']['score_2013']\n","  score2014 = gj['features'][point_id]['properties']['score_2014']\n","  score2015 = gj['features'][point_id]['properties']['score_2015']\n","  score2016 = gj['features'][point_id]['properties']['score_2016']\n","  score2017 = gj['features'][point_id]['properties']['score_2017']\n","  score2018 = gj['features'][point_id]['properties']['score_2018']\n","  score2019 = gj['features'][point_id]['properties']['score_2019']\n","\n","  score2020 = gj['features'][point_id]['properties']['score_2020']\n","\n","  new_tree_distances = ((number_new_trees*radius_circle) / number_new_trees)\n","\n","  try:\n","    if new_tree_distances <= 5:\n","      new_score_2020 = 1 + score2020\n","  except:\n","    pass\n","  try:\n","    if new_tree_distances > 5 and new_tree_distances <= 10:\n","      new_score_2020 = 0.8 + score2020\n","  except:\n","    pass\n","  try: \n","    if new_tree_distances > 10 and new_tree_distances <= 20:\n","      new_score_2020 = 0.6 + score2020\n","  except:\n","    pass\n","  try:\n","    if new_tree_distances > 20 and new_tree_distances <= 35:\n","      new_score_2020 = 0.4 + score2020\n","  except:\n","    pass\n","  try:\n","    if new_tree_distances > 35 and new_tree_distances <= 90:\n","      new_score_2020 = 0.2 + score2020\n","  except:\n","    new_score_2020 = score2020\n","\n","\n","  # list 20 years score from the point selected\n","  list_20_years_score = [score2001,score2002,score2003,score2004,score2005,\n","                         score2006,score2007,score2008,score2009,score2010,\n","                         score2011,score2012,score2013,score2014,score2015,\n","                         score2016,score2017,score2018,score2019,new_score_2020]\n","                         \n","  #Coef. Linear Regreassion Model\n","  coef_model = [0.00069954,-0.000271,0.00680505,0.00350223,0.01339399,\n","                0.01206329,0.02435626, 0.02154593, 0.04283208, 0.03363087, \n","                0.03007545, 0.05138728,0.04665394, 0.05387783, 0.08424082, \n","                0.08033359, 0.08898264, 0.11307264,0.09898938, 0.12179241]\n","    \n","  #Score point selected\n","  result = []\n","  for num1, num2 in zip(list_20_years_score, coef_model):\n","    result.append(num1 * num2)\n","    \n","  score_result = sum(result)\n","  \n","  # Here, use the results variable to impact your output\n","  \n","  element = {\n","      \"type\": \"Feature\",\n","      \"geometry\": {\n","          \"type\": \"Point\",\n","          \"coordinates\": [lat, lng] # OR WHATEVER\n","          },\n","          \"properties\": {\n","              \"previous_score\": score2020,\n","              \"new_score\": score_result\n","              }\n","             }\n","  new_point.append(element)\n","  \n","  return new_point"],"metadata":{"id":"bAJozv9lCDjq","executionInfo":{"status":"error","timestamp":1655663201500,"user_tz":-120,"elapsed":6,"user":{"displayName":"Jacinto Jesús Moros Montañés","userId":"01080705787675890215"}},"colab":{"base_uri":"https://localhost:8080/","height":130},"outputId":"602aa712-48f6-496c-f238-1f4f21ea0785"},"execution_count":null,"outputs":[{"output_type":"error","ename":"SyntaxError","evalue":"ignored","traceback":["\u001b[0;36m  File \u001b[0;32m\"<ipython-input-1-36fa6f85ac5f>\"\u001b[0;36m, line \u001b[0;32m16\u001b[0m\n\u001b[0;31m    score2001 = gj[][point_id]['score']['2001']\u001b[0m\n\u001b[0m                   ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"]}]},{"cell_type":"code","source":["a = call()"],"metadata":{"id":"AKyK7uW4CxgG"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def call(input_args):\n","    circles = []  # THIS IS A CONTAINER FOR THE LIST OF GEOJSON ELEMENTS YOU'LL BE RETURNING\n","\n","    model = <whateverlibraryyouused>.load_model_or_whatever('model.h5')\n","    lat = input_args['user_clicked_point_lat']\n","    lng = input_args['user_clicked_point_lat']\n","    # and whatever args you are expecting from the frontend\n","\n","    results = model.predict(with, whatever, your, model, takes, as, args)\n","\n","    # Here, use the results variable to impact your output\n","\n","    for score_or_whatever in results:\n","        element = {\n","            \"type\": \"Feature\",\n","            \"geometry\": {\n","                \"type\": \"Point\",\n","                \"coordinates\": [lat, lng] # OR WHATEVER\n","            },\n","            \"properties\": {\n","                \"score\": score_or_whatever\n","            }\n","        }\n","        circles.append(element)\n","\n","    return circles"],"metadata":{"id":"u0UNleyqkrL2"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["lat = 42.99\n","lng = 155\n","a = [0.00069954,-0.000271,0.00680505,0.00350223,0.01339399,0.01206329,\n","     0.02435626, 0.02154593, 0.04283208, 0.03363087, 0.03007545, 0.05138728,\n","     0.04665394, 0.05387783, 0.08424082, 0.08033359, 0.08898264, 0.11307264,\n","     0.09898938  0.12179241]"],"metadata":{"id":"2B9G3tkchs9f"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["a = [0.00069954,-0.000271,0.00680505,0.00350223,0.01339399,0.01206329,\n","     0.02435626, 0.02154593, 0.04283208, 0.03363087, 0.03007545, 0.05138728,\n","     0.04665394, 0.05387783, 0.08424082, 0.08033359, 0.08898264, 0.11307264,\n","     0.09898938, 0.12179241]"],"metadata":{"id":"CMf_UVv1iLi1"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["a"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wbMvhRkJiMPq","executionInfo":{"status":"ok","timestamp":1655316244700,"user_tz":-120,"elapsed":252,"user":{"displayName":"Jacinto Jesús Moros Montañés","userId":"01080705787675890215"}},"outputId":"8a00713a-39c0-4b69-b9ec-eb192588780d"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[0.00069954,\n"," -0.000271,\n"," 0.00680505,\n"," 0.00350223,\n"," 0.01339399,\n"," 0.01206329,\n"," 0.02435626,\n"," 0.02154593,\n"," 0.04283208,\n"," 0.03363087,\n"," 0.03007545,\n"," 0.05138728,\n"," 0.04665394,\n"," 0.05387783,\n"," 0.08424082,\n"," 0.08033359,\n"," 0.08898264,\n"," 0.11307264,\n"," 0.09898938,\n"," 0.12179241]"]},"metadata":{},"execution_count":5}]},{"cell_type":"markdown","source":["need to be return as a geojson"],"metadata":{"id":"45ruY6mP_thK"}},{"cell_type":"code","source":["def normalize_data(data):\n","  # Normalized the data\n","  column = 'value_temperature'\n","  scored_column = 'normalized_'+ column\n","  data[column] = np.where(data[column] <= 9, 0, data[column])\n","  data[column] = np.where(((data[column] > 9) & (data[column] <= 20)), 0.5, data[column])\n","  data[column] = np.where(((data[column] > 20) & (data[column] <= 40)), 1, data[column])\n","  data[column] = np.where(data[column] > 40, 0, data[column])\n","  data = data.rename(columns={column: scored_column})\n","\n","  column = 'value_windSpeed'\n","  scored_column = 'normalized_'+ column\n","  data[column] = np.where(data[column] <= 2.3, 0, data[column])\n","  data[column] = np.where(((data[column] > 2.3) & (data[column] <= 6)), 1, data[column])\n","  data[column] = np.where(data[column] > 6, 0, data[column])\n","  data = data.rename(columns={column: scored_column})\n","\n","  column = 'value_windDirection'\n","  scored_column = 'normalized_'+ column\n","  data[column] = np.where(data[column] <= 210, 0, data[column])\n","  data[column] = np.where(((data[column] > 210) & (data[column] <= 230)), 1, data[column])\n","  data[column] = np.where(data[column] > 230, 0.5, data[column])\n","  data = data.rename(columns={column: scored_column})\n","\n","  column = 'value_humidity'\n","  scored_column = 'normalized_'+ column\n","  data[column] = np.where(data[column] <= 2.7, 0, data[column])\n","  data[column] = np.where(((data[column] > 2.7) & (data[column] <= 3.3)), 0.5, data[column])\n","  data[column] = np.where(((data[column] > 3.3) & (data[column] <= 4)), 1, data[column])\n","  data[column] = np.where(((data[column] > 4) & (data[column] <= 5.6)), 0.5, data[column])\n","  data[column] = np.where(data[column] > 5.6, 0, data[column])\n","  data = data.rename(columns={column: scored_column})\n","\n","  column = 'value_skyCover'\n","  scored_column = 'normalized_'+ column\n","  data[column] = np.where(data[column] <= 63, 0, data[column])\n","  data[column] = np.where(((data[column] > 63) & (data[column] <= 68)), 1, data[column])\n","  data[column] = np.where(((data[column] > 68) & (data[column] <= 73)), 0.5, data[column])\n","  data[column] = np.where(data[column] > 73, 0, data[column])\n","  data = data.rename(columns={column: scored_column})\n","\n","  column = 'value_earthTemperature'\n","  scored_column = 'normalized_'+ column\n","  data[column] = np.where(data[column] <= 10, 0, data[column])\n","  data[column] = np.where(((data[column] > 10) & (data[column] <= 26)), 0.5, data[column])\n","  data[column] = np.where(((data[column] > 26) & (data[column] <= 30)), 1, data[column])\n","  data[column] = np.where(((data[column] > 30) & (data[column] <= 45)), 0.5, data[column])\n","  data[column] = np.where(data[column] > 45, 0, data[column])\n","  data = data.rename(columns={column: scored_column})\n","\n","  column = 'value_precipitationWater'\n","  scored_column = 'normalized_'+ column\n","  data[column] = np.where(data[column] <= 1.6, 0, data[column])\n","  data[column] = np.where(((data[column] > 1.6) & (data[column] <= 2)), 1, data[column])\n","  data[column] = np.where(data[column] > 2, 0, data[column])\n","  data = data.rename(columns={column: scored_column})\n","\n","  column = 'value_directIlluminance'\n","  scored_column = 'normalized_'+ column\n","  data[column] = np.where(data[column] <= 10000, 0, data[column])\n","  data[column] = np.where(((data[column] > 10000) & (data[column] <= 20000)), 0.5, data[column])\n","  data[column] = np.where(((data[column] > 20000) & (data[column] <= 25000)), 1, data[column])\n","  data[column] = np.where(((data[column] > 25000) & (data[column] <= 30000)), 0.5, data[column])\n","  data[column] = np.where(data[column] > 30000, 0, data[column])\n","  data = data.rename(columns={column: scored_column})\n","\n","  column = 'value_diffuseIlluminance'\n","  scored_column = 'normalized_'+ column\n","  data[column] = np.where(data[column] <= 10000, 0, data[column])\n","  data[column] = np.where(((data[column] > 10000) & (data[column] <= 12500)), 1, data[column])\n","  data[column] = np.where(((data[column] > 12500) & (data[column] <= 15000)), 0.5, data[column])\n","  data[column] = np.where(data[column] > 15000, 0, data[column])\n","  data = data.rename(columns={column: scored_column})\n","\n","  column = 'value_irradiation'\n","  scored_column = 'normalized_'+ column\n","  data[column] = np.where(data[column] <= 5, 0, data[column])\n","  data[column] = np.where(((data[column] > 5) & (data[column] <= 6.5)), 0.5, data[column])\n","  data[column] = np.where(((data[column] > 6.5) & (data[column] <= 7.5)), 1, data[column])\n","  data[column] = np.where(data[column] > 7.5, 0, data[column])\n","  data = data.rename(columns={column: scored_column})\n","\n","  column = 'value_airQuality'\n","  scored_column = 'normalized_'+ column\n","  data[column] = np.where(data[column] <= 10, 0, data[column])\n","  data[column] = np.where(((data[column] > 0) & (data[column] <= 5)), 1, data[column])\n","  data[column] = np.where(((data[column] > 5) & (data[column] <= 15)), 0.5, data[column])\n","  data[column] = np.where(data[column] > 15, 0, data[column])\n","  data = data.rename(columns={column: scored_column})\n","\n","  column = 'value_trees'\n","  scored_column = 'normalized_'+ column\n","  data[column] = np.where(data[column] <= 0, 1, data[column])\n","  data[column] = np.where(((data[column] > 0) & (data[column] <= 50)), 1, data[column])\n","  data[column] = np.where(((data[column] > 50) & (data[column] <= 100)), 0.5, data[column])\n","  data[column] = np.where(data[column] > 100, 0, data[column])\n","  data = data.rename(columns={column: scored_column})\n","\n","  column = 'value_landuse'\n","  scored_column = 'normalized_'+ column\n","  data[column] = np.where(data[column] <= 0, 1, data[column])\n","  data[column] = np.where(((data[column] > 0) & (data[column] <= 50)), 1, data[column])\n","  data[column] = np.where(((data[column] > 50) & (data[column] <= 100)), 0.5, data[column])\n","  data[column] = np.where(data[column] > 100, 0, data[column])\n","  data = data.rename(columns={column: scored_column})\n","\n","  column = 'value_water'\n","  scored_column = 'normalized_'+ column\n","  data[column] = np.where(data[column] <= 0, 1, data[column])\n","  data[column] = np.where(((data[column] > 0) & (data[column] <= 50)), 1, data[column])\n","  data[column] = np.where(((data[column] > 50) & (data[column] <= 100)), 0.5, data[column])\n","  data[column] = np.where(data[column] > 100, 0, data[column])\n","  data = data.rename(columns={column: scored_column})\n","\n","  return(data)"],"metadata":{"id":"aI-Z056vDkGJ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["trees_VALUE = target_locations_final_save.loc[target_locations_final_save['tag'] == 'trees']\n","trees_VALUE = trees_VALUE.loc[trees_VALUE['start_date'] <= select_year]\n","trees_VALUE.reset_index(drop=True, inplace=True)\n","tree_data = nearest_neighbor(file_year,trees_VALUE , return_dist=True)\n","tree_data\n","file_year['value_trees'] = tree_data['distance'] "],"metadata":{"id":"o4hJ0QStEMKS"},"execution_count":null,"outputs":[]}]}